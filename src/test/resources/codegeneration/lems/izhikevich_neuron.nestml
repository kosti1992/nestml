neuron izhikevich_neuron:

  state:
    v mV = -65mV # Membrane potential in mV
    u mV
    # TODO add new variable U_m with the type real
    # NESTML syntax for variables: variable_name real = initial_value
  end

  equations:
    # TODO Add 2 ODEs for the V_m und U_m.
    # You can use current buffer I directly in the ODE
    v' = (0.04 *v *v/1mV + 5 * v + 140mV - u+I*1mV)  # old=(0.04 *v *v/1mV + 5 * v + 140mV - u + I)/1ms
    u' = (a*(b*v/1mV -v))   #division durch 1ms nicht nötig, da dies vom framework übernommen wird.
  end

  parameter:
    # Add 4 variables a,b,c, d of real type
    a real = 0.02
    b mV = 0.2mV
    c mV = -65.0mV
    d mV = 2mV
  end

  input:
    # TODO add current buffer named I
    # NESTML Syntax for current buffers: buffer_name <- current
    #I <- current #by Kosti: das geht ins auge, sowas kannst du nicht machen in LEMS,da ports keine variablen sind
  end

  output: spike

  update:
    #integrate_odes()#by KPerun if you want to integrate everthing (variables provided with a derivation instruction), just skip this method
    # TODO: Implement threshold crossing check

    # use an if-conditional block. The NESTML systax looks like:
    # if a >= b:
    #   a += b
    #   b = a
    #   emit_spike()
    # end

    if v >= 30.0mV:
      u += d
      v = c
    end

  end

end