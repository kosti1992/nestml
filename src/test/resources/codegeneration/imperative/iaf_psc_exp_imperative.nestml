neuron iaf_psc_exp_ms_imperative_nestml:
  state:
   i_0 real = 0.0       # synaptic stepwise constant input current, variable 0
   i_1 real = 0.0       # presynaptic stepwise constant input current
   i_syn_ex real = 0.0  # postsynaptic current for exc. inputs, variable 1
   i_syn_in real = 0.0  # postsynaptic current for inh. inputs, variable 1
   V_m real = 0.0       # membrane potential, variable 2
  end

  parameters:
   Tau  ms = 10.0
   C_1 ms = 250.0
   t_ref ms = 2.0
   U0 mV = -70.0
   I_e pA = 0.0
   function Theta mV = -55.0 - U0 # relative U0
   function V_reset mV = -70.0 - U0  # in mV
   tau_ex ms = 2.0
   tau_in ms = 2.0
  end

  internals:
    h   ms   = resolution()
    r_ref integer  = 0   # absolute refractory counter (no membrane potential propagation)
    # these P are independent
    P11ex real = exp(-h/tau_ex)
    P11in real = exp(-h/tau_in)
    P22 real = exp(-h/Tau)
    P20 real = Tau/C_1*(1.0 - P22)

    # these depend on the above. Please do not change the order.
    P21ex real = Tau/(C_1*(1.0-Tau/tau_ex)) * P11ex * (1.0 - exp(h*(1.0/tau_ex-1.0/Tau)))
    P21in real = Tau/(C_1*(1.0-Tau/tau_in)) * P11in * (1.0 - exp(h*(1.0/tau_in-1.0/Tau)))

    weighted_spikes_ex real
    weighted_spikes_in real

    RefractoryCounts integer = steps(t_ref)
  end

  input:
    spikeBufferInh   <- inhibitory spike
    spikeBufferExc   <- excitatory spike
    currentBuffer <- current
  end

  output: spike

  update:
    if r_ref == 0: # neuron not refractory, so evolve V
      V_m = V_m*P22 + i_syn_ex*P21ex + i_syn_in*P21in + (I_e+i_0)*P20
    else:
      r_ref = r_ref - 1 # neuron is absolute refractory
    end

    # exponential decaying PSCs
    i_syn_ex = i_syn_ex * P11ex
    i_syn_in = i_syn_in * P11in

    # add evolution of presynaptic input current
    i_syn_ex = i_syn_ex + (1.0 - P11ex) * i_1

    # the spikes arriving at T+1 have an immediate effect on the state of the neuron
    weighted_spikes_ex = spikeBufferExc.get_sum()
    weighted_spikes_in = spikeBufferInh.get_sum()

    i_syn_ex = i_syn_ex + weighted_spikes_ex
    i_syn_in = i_syn_in + weighted_spikes_in

    if V_m >= Theta:  # threshold crossing
      r_ref = RefractoryCounts
      V_m = V_reset

      emit_spike()
    end

    # TODO this must be represented
    #   S_.i_0_ = B_.currents_[0].get_value(lag)
    #   S_.i_1_ = B_.currents_[1].get_value(lag)
    i_0 = currentBuffer.get_sum(t)
    i_1 = currentBuffer.get_sum(t)
  end

end
