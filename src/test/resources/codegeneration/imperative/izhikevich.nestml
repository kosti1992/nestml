neuron izhikevich_neuron:
  state:
    V_m mV = -65.0 # membrane potential
    U_m mV = 0.0   # membrane recovery variable
    I pA = 0.0   # input current
  end

  parameters:
    a real = 0.02 # a
    b real = 0.2  # b
    c real =  -65.0  # c without unit
    d real = 8.0 # d
    I_e pA =  0. # pA
    V_th mV = 30.0
    V_min mV = -inf #

    consistent_integration boolean = true
  end

  internals:
    h     ms   = resolution()
  end

  input:
    spikes <- spike
    currents  <- current
  end

  output: spike

  update:
    v_old, u_old real
    # neuron is never refractory
    # use standard forward Euler numerics in this case
    spikesSum real = spikes.get_sum()
    if consistent_integration:
      v_old = V_m
      u_old = U_m

      V_m = V_m + h *( 0.04*v_old*v_old + 5.0*v_old + 140.0 - u_old + I + I_e) + spikesSum
      U_m = U_m + h * a * (b * v_old - u_old)
    else: # use numerics published in Izhikevich (2003) in this case (not recommended)
      V_m = V_m + h/2.0 * (0.04*V_m*V_m + 5.0*V_m + 140.0 - U_m + I + I_e) + spikesSum
      V_m = V_m + h/2.0 * (0.04*V_m*V_m + 5.0*V_m + 140.0 - U_m + I + I_e) + spikesSum
      U_m = U_m + h * a * (b*V_m - U_m)
    end

    # lower bound of membrane potential
    if V_m < V_min:
      V_m = V_min
    end
    # threshold crossing
    if V_m >= V_th:
      V_m = c
      U_m = U_m + d

      emit_spike()
    end

    I = currents.get_sum()

  end

end