neuron mat2_exp_neuron:
  state:
    # synaptic dc input current, variable 0
    i_0 real = 0.0
    # postsynaptic current for exc. inputs, variable 1
    i_syn_ex real = 0.0
    # postsynaptic current for inh. inputs, variable 1
    i_syn_in real = 0.0
    # membrane potential, variable 2
    V_m real = 0.0
    # short time adaptive threshold (related to tau_1_), variable 1
    V_th_1 real = 0.0
    # long time adaptive threshold (related to tau_2_), variable 2
    V_th_2 real = 0.0
  end

  parameters:
    # Membrane time constant
    Tau ms = 5.0
    # Membrane capacitance in pF
    C_1 pF = 100.0
    # Refractory period
    tau_ref ms = 2.0
    # Resting potential
    U0 mV = -70.0
    I_e pA = 0.0
    # Time constant of excitatory synaptic current
    tau_ex ms = 1.0
    # Time constant of inhibitory synaptic current
    tau_in ms = 3.0
    # Short and long time constant of adaptive threshold
    tau_1 ms = 10.0
    tau_2 ms = 200.0
    # Amplitudes of threshold adaption
    alpha_1 mV = 37.0
    alpha_2 mV = 2.0
    # Resting threshold in mV   (relative to resting potential).
    # The real resting threshold is (U0_+omega_).
    omega mV = 19.0
  end

  internals:
    h     ms   = resolution()
    # total refractory counter (no spikes can be generated)
    r integer = 0

    P11ex real = exp(-h/tau_ex)
    P11in real = exp(-h/tau_in)

    # these depend on the above. Please do not change the order.
    P21ex real = - Tau/(C_1*(1.0-Tau/tau_ex)) * P11ex * expm1(h*(1.0/tau_ex-1.0/Tau))
    P21in real = - Tau/(C_1*(1.0-Tau/tau_in)) * P11in * expm1(h*(1.0/tau_in-1.0/Tau))
    P22_expm1 real = expm1(-h/Tau)
    P20 real = - Tau/C_1 * P22_expm1 # constant currents

    # --------------------
    # adaptive threshold
    # --------------------
    P11th real = exp(-h/tau_1)
    P22th real = exp(-h/tau_2)
    RefractoryCountsTot integer = steps(tau_ref)
  end

  input:
    spikes_ex <- inhibitory spike
    spikes_in <- excitatory spike
    currents  <- current
  end

  output: spike

  update:
    # evolve membrane potential
    V_m = V_m*P22_expm1 + V_m + i_syn_ex*P21ex + i_syn_in*P21in + (I_e+i_0)*P20

    # evolve adaptive threshold
    V_th_1 = V_th_1 * P11th
    V_th_2 = V_th_2 * P22th

    # exponential decaying PSCs
    i_syn_ex = i_syn_ex * P11ex
    i_syn_in = i_syn_in * P11in
    # the spikes arriving at T+1 have an
    i_syn_ex = i_syn_ex + spikes_ex.get_sum()
    # the spikes arriving at T+1 have an
    i_syn_in = i_syn_in + spikes_in.get_sum()

    if r == 0: # neuron is allowed to fire
      if V_m >= (omega + V_th_2 + V_th_1 ): # threshold crossing
        r = RefractoryCountsTot

        # procedure for adaptive potential
        V_th_1 = V_th_1 + alpha_1 # short time
        V_th_2 = V_th_2 + alpha_2 # long time

        emit_spike()
      else:
        r = r -1 # neuron is totally refractory (cannot generate spikes)

        # set new input current
        i_0 = currents.get_sum()
      end

    end
    # set new input current
    i_0 = currents.get_sum()

  end

end
