/*
 * Copyright (c) 2015 RWTH Aachen. All rights reserved.
 *
 * http://www.se-rwth.de/
 */
package org.nest;

/**
  Grammar representing the Simple Programming Language (SPL). It is easy to learn imperative
  language which leans on the Python syntax.
*/
grammar NESTML extends org.nest.SPL, org.nest.ODE {

  /** ASTNESTMLCompilationUnit represents the complete entire file with neuron and component models.
    @attribute packageName      The qualified name to artifact
    @attribute Import           List of imported elements
    @attribute Neuron           The neuron representation
  */
  NESTMLCompilationUnit = (Neuron | NEWLINE)* EOF;

  /** ASTNeuron represents neuron.
    @attribute Name    The name of the neuron
    @attribute Body    The body of the neuron, e.g. internal, state, parameter...
  */
  Neuron = "neuron" Name Body;

  /** ASTBodyElement represents a single entry in the neuron or component: e.g. internal, state,
      parameter... The interface is used to enable language extension.
  */
  interface BodyElement;

  /** ASTBody The body of the neuron, e.g. internal, state, parameter...
  */
  Body = BLOCK_OPEN
           (NEWLINE | BodyElement)*
         BLOCK_CLOSE;

  /** ASTVar_Block represent a block with variables, e.g.:
    state:
      y0, y1, y2, y3 mV [y1 > 0; y2 > 0]
    end

    @attribute state true if the varblock ist a state.
    @attribute parameter true if the varblock ist a parameter.
    @attribute internal true if the varblock ist a state internal.
    @attribute AliasDecl a list with variable declarations.
  */
  Var_Block implements BodyElement =
    (["state"]|["parameters"]|["internals"])
    BLOCK_OPEN
      (Declaration | NEWLINE)*
    BLOCK_CLOSE;

  /** ASTDynamics a special function definition:
      update:
        if r == 0: # not refractory
          integrate(V)
        end
      end
     @attribute block Implementation of the dynamics.
   */
  Dynamics implements BodyElement =
    "update"
    BLOCK_OPEN
      Block
    BLOCK_CLOSE;

  /** ASTEquations a special function definition:
       equations:
         G = (e/tau_syn) * t * exp(-1/tau_syn*t)
         V' = -1/Tau * V + 1/C_m * (I_sum(G, spikes) + I_e + currents)
       end
     @attribute ddeDeclaration Block with equations and differential equations.
   */
  Equations implements BodyElement =
    "equations"
    BLOCK_OPEN
      OdeDeclaration
    BLOCK_CLOSE;

  /** ASTInput represents the input block:
    input:
      spikeBuffer   <- inhibitory excitatory spike
      currentBuffer <- current
    end

    @attribute inputLine set of input lines.
  */
  Input implements BodyElement = "input"
    BLOCK_OPEN
      (InputLine | NEWLINE)*
    BLOCK_CLOSE;

  /** ASTInputLine represents a single line form the input, e.g.:
      spikeBuffer   <- inhibitory excitatory spike

    @attribute sizeParameter Optional parameter representing  multisynapse neuron.
    @attribute sizeParameter Type of the inputchannel: e.g. inhibitory or excitatory (or both).
    @attribute spike true iff the neuron is a spike.
    @attribute current true iff. the neuron is a current.
  */
  InputLine =
    Name
    ("[" sizeParameter:Name "]")?
    "<-" InputType*
    (["spike"] | ["current"]);

  /** ASTInputType represents the type of the inputline e.g.: inhibitory or excitatory:
    @attribute inhibitory true iff the neuron is a inhibitory.
    @attribute excitatory true iff. the neuron is a excitatory.
  */
  InputType = (["inhibitory"] | ["excitatory"]);

  /** ASTOutput represents the output block of the neuron:
        output: spike
      @attribute spike true iff the neuron has a spike output.
      @attribute current true iff. the neuron is a current output.
    */
  Output implements BodyElement = "output" BLOCK_OPEN (["spike"] | ["current"]) ;

  /** ASTFunction a function definition:
      function set_V_m(v mV):
        y3 = v - E_L
      end
    @attribute name Functionname.
    @attribute parameters List with function parameters.
    @attribute returnType Complex return type, e.g. String
    @attribute primitiveType Primitive return type, e.g. int
    @attribute block Implementation of the function.
  */
  Function implements BodyElement = "function" Name "(" Parameters? ")" (returnType:Datatype)?
           BLOCK_OPEN
             Block
           BLOCK_CLOSE;

  /** ASTParameters models parameter list in function declaration.
    @attribute parameters List with parameters.
  */
  Parameters = Parameter ("," Parameter)*;

  /** ASTParameter represents singe:
      output: spike
    @attribute compartments Lists with compartments.
  */
  Parameter = Name Datatype;
}
