/*
 * Copyright (c) 2015 RWTH Aachen. All rights reserved.
 *
 * http://www.se-rwth.de/
 */
package org.nest;

grammar Commons extends de.monticore.types.Types, org.nest.Units {

  token SL_COMMENT =
    "#" (~('\n' |
      '\r' )
    )* :
    { _channel = HIDDEN;
      if (getCompiler() != null) {
        de.monticore.ast.Comment _comment = new de.monticore.ast.Comment(getText());
        de.se_rwth.commons.SourcePosition startPos = new de.se_rwth.commons.SourcePosition(_tokenStartLine, _tokenStartCharPositionInLine);
        _comment.set_SourcePositionStart(startPos);
        _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(startPos, getText()));
        getCompiler().addComment(_comment);
      }
    };

  token NEWLINE = ('\r' '\n' | '\r' | '\n' );

  token WS = (' ' | '\t'):{_channel = HIDDEN;};

  token LINE_ESCAPE = '\\' '\r'? '\n':{_channel = HIDDEN;};

  BLOCK_OPEN = ":";

  BLOCK_CLOSE = "end";

  Expr = leftParentheses:["("] Expr rightParentheses:[")"]
         | <rightassoc> base:Expr pow:["**"] exponent:Expr
         | (unaryPlus:["+"] | unaryMinus:["-"] | unaryTilde:["~"]) term:Expr
         | left:Expr (timesOp:["*"] | divOp:["/"] | moduloOp:["%"]) right:Expr
         | left:Expr (plusOp:["+"] | minusOp:["-"]) right:Expr
         | left:Expr (shiftLeft:["<<"] | shiftRight:[">>"]) right:Expr
         | left:Expr bitAnd:["&"] right:Expr
         | left:Expr bitXor:["^"]  right:Expr
         | left:Expr bitOr:["|"] right:Expr
         | left:Expr (lt:["<"] |
                      le:["<="] |
                      eq:["=="] |
                      ne:["!="] |
                      ne2:["<>"] |
                      ge:[">="] |
                      gt:[">"]) right:Expr 
         | logicalNot:["not"] Expr
         | left:Expr logicalAnd:["and"] right:Expr
         | left:Expr logicalOr:["or"] right:Expr
         | condition:Expr "?" ifTrue:Expr ":" ifNot:Expr
         | FunctionCall
         | BooleanLiteral // true & false;
         | NumericLiteral Variable
         | NumericLiteral
         | StringLiteral
         | ["inf"]
         | Variable;


  /**
    ASTVariable Provides a 'marker' AST node to identify variables used in expressions.
    @attribute name
  */
  Variable = name:QualifiedName (differentialOrder:"\'")*;

  /**
    ASTFunctionCall Represents a function call, e.g. myFun("a", "b").
    @attribute name The (qualified) name of the fucntions
    @attribute args Comma separated list of expressions representing parameters.
  */
  FunctionCall = name:QualifiedName "(" args:(Expr& || ",")* ")";

}
