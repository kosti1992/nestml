/* Name: iaf_cond_beta - Simple conductance based leaky integrate-and-fire neuron model.

Description:
iaf_cond_beta is an implementation of a spiking neuron using IAF dynamics with
conductance-based synapses. Incoming spike events induce a post-synaptic change
of conductance modelled by an beta function. The beta function
is normalised such that an event of weight 1.0 results in a peak current of 1 nS
at t = tau_syn.

References:
Meffin, H., Burkitt, A. N., & Grayden, D. B. (2004). An analytical
model for the large, fluctuating synaptic conductance state typical of
neocortical neurons in vivo				. J.  Comput. Neurosci., 16, 159-175.
Bernander, O ., Douglas, R. J., Martin, K. A. C., & Koch, C. (1991).
Synaptic background activity influences spatiotemporal integration in
single pyramidal cells.  Proc. Natl. Acad. Sci. USA, 88(24),
11569-11573.
Kuhn, Aertsen, Rotter (2004) Neuronal Integration of Synaptic Input in
the Fluctuation- Driven Regime. Jneurosci 24(10) 2345-2356
Author: Schrader, Plesser
SeeAlso: iaf_cond_exp, iaf_cond_beta_mc, iaf_cond_alpha */

neuron iaf_cond_beta_neuron:
  state:
    V_m mV = E_L # membrane potential
    GI nS = 0 nS # inputs from the inh conductance
    GE nS = 0 nS # inputs from the exc conductance

  end

  equations:
      GI'' = -GI'/tau_syn_rise_I
      GI' = GI' - GI/tau_syn_decay_I

      GE'' = -GE'/tau_syn_rise_E
      GE' = GE' -GE/tau_syn_decay_E

      function I_syn_exc pA = (F_E + cond_sum(GE, spikeExc)) * ( V_m - E_ex )
      function I_syn_inh pA = (F_I + cond_sum(GI, spikeInh)) * ( V_m - E_in )
      function I_leak pA = g_L * ( V_m - E_L ) # pa = nS * mV
      V_m' =  (-I_leak - I_syn_exc - I_syn_inh + I_stim + I_e ) / C_m
  end

  parameters:
    E_L mV = -85.0mV # Leak reversal Potential (aka resting potential) in mV
    C_m pF = 250.0pF # Capacity of the membrane
    t_ref ms = 2.0ms # Refractory period in ms
    V_th mV = -55.0mV      # Threshold Potential in mV
    V_reset mV = -60.0mV   # Reset Potential in mV
    E_ex mV = 0mV          # Excitatory reversal Potential in mV
    E_in mV = -85.0mV      # Inhibitory reversal Potential in mV
    g_L nS = 16.6667nS     # Leak Conductance in nS
    tau_syn_rise_I ms = 0.2ms    # Synaptic Time Constant Excitatory Synapse in ms
    tau_syn_decay_I ms = 2.0ms   # Synaptic Time Constant for Inhibitory Synapse in ms
    tau_syn_rise_E ms = 0.2ms    # Synaptic Time Constant Excitatory Synapse in ms
    tau_syn_decay_E ms = 2.0ms   # Synaptic Time Constant for Inhibitory Synapse in ms
    I_e pA = 0pA            # Constant Current in pA
    F_E nS = 0nS            # Constant External input conductance in nS (excitatory).
    F_I nS = 0nS            # Constant External input conductance in nS (inhibitory).
    I_stim pA = 0pA # Input current injected by CurrentEvent.
                    # This variable is used to transport the current applied into the
                    # _dynamics function computing the derivative of the state vector.
  end

  internals:
    # Impulse to add to GE' on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_E real = 1.0 * e / tau_syn_rise_E #

    # Impulse to add to GI' on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_I real = 1.0 * e / tau_syn_rise_I

    RefractoryCounts integer = steps(t_ref) # refractory time in steps
    r integer                               # counts number of tick during the refractory period
  end

  input:
      spikeInh   <- inhibitory spike
      spikeExc   <- excitatory spike
      currents <- current
  end

  output: spike

  update:

    integrate_odes()
    if r != 0: # not refractory
      r =  r - 1
      V_m = V_reset # clamp potential

    elif V_m >= V_th:
      r = RefractoryCounts
      V_m = V_reset # clamp potential
      emit_spike()

    end

    GE' += spikeExc.get_sum() * PSConInit_E
    GI' += spikeInh.get_sum() * PSConInit_I
    I_stim = currents.get_sum()
  end

end
