/*
Name: terub_neuron_stn - Terman Rubin neuron model.

Description:

  terub_neuron_stn is an implementation of a spiking neuron using the Terman Rubin model
  based on the Hodgkin-Huxley formalism.

  (1) Post-syaptic currents
  Incoming spike events induce a post-synaptic change of current modelled
  by an alpha function. The alpha function is normalised such that an event of
  weight 1.0 results in a peak current of 1 pA.


  (2) Spike Detection
  Spike detection is done by a combined threshold-and-local-maximum search: if there
  is a local maximum above a certain threshold of the membrane potential, it is considered a spike.

Problems/Todo:

  better spike detection

References:
  Terman, D. and Rubin, J.E. and Yew, A.C. and Wilson, C.J.
  Activity Patterns in a Model for the Subthalamopallidal Network
  of the Basal Ganglia
  The Journal of Neuroscience, 22(7), 2963-2976 (2002)

  Rubin, J.E. and Terman, D.
  High Frequency Stimulation of the Subthalamic Nucleus Eliminates
  Pathological Thalamic Rhythmicity in a Computational Model
  Journal of Computational Neuroscience, 16, 211-235 (2004)


Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

Author: Martin Ebert
*/
neuron terub_neuron_stn:

  state:
    V_m mV = E_L #  Membrane potential

    g_in pA = 0pA # Inhibitory synaptic conductance
    g_ex pA = 0pA # Excitatory synaptic conductance

    gate_h     real # gating variable h
    gate_n     real # gating variable n
    gate_r     real # gating variable r
    Ca_con     real # gating variable r
  end

  equations:
    #Parameters for Terman Rubin STN Neuron

    #time constants for slow gating variables
    function tau_n_0 ms = 1.0ms
    function tau_n_1 ms = 100.0ms
    function theta_n_tau mV = -80.0mV
    function sigma_n_tau mV = -26.0mV

    function tau_h_0 ms = 1.0ms
    function tau_h_1 ms = 500.0ms
    function theta_h_tau mV = -57.0mV
    function sigma_h_tau mV = -3.0mV

    function tau_r_0 ms = 7.1ms # Guo 7.1 Terman02 40.0
    function tau_r_1 ms = 17.5ms
    function theta_r_tau mV = 68.0mV
    function sigma_r_tau mV = -2.2mV

    #steady state values for gating variables
    function theta_a mV = -63.0mV
    function sigma_a mV = 7.8mV
    function theta_h mV = -39.0mV
    function sigma_h mV = -3.1mV
    function theta_m mV = -30.0mV
    function sigma_m mV = 15.0mV
    function theta_n mV = -32.0mV
    function sigma_n mV = 8.0mV
    function theta_r mV = -67.0mV
    function sigma_r mV = -2.0mV
    function theta_s mV = -39.0mV
    function sigma_s mV = 8.0mV

    function theta_b real = 0.25 # Guo 0.25 Terman02 0.4
    function sigma_b real = 0.07 # Guo 0.07 Terman02 -0.1

    #time evolvement of gating variables
    function phi_h real = 0.75
    function phi_n real = 0.75
    function phi_r real = 0.5 # Guo 0.5 Terman02 0.2

    # Calcium concentration and afterhyperpolarization current
    function epsilon 1/ms = 0.00005 / ms # 1/ms Guo 0.00005 Terman02 0.0000375
    function k_Ca real = 22.5
    function k1 real = 15.0

    function I_ex_mod pA = -curr_sum(g_ex,spikeExc)*V_m
    function I_in_mod pA = curr_sum(g_in, spikeInh) * (V_m-E_gs)

    function tau_n mV = tau_n_0 + tau_n_1 / (1. + exp(-(V_m-theta_n_tau)/sigma_n_tau))
    function tau_h mV = tau_h_0 + tau_h_1 / (1. + exp(-(V_m-theta_h_tau)/sigma_h_tau))
    function tau_r mV = tau_r_0 + tau_r_1 / (1. + exp(-(V_m-theta_r_tau)/sigma_r_tau))

    function a_inf real = 1. / (1. +exp(-(V_m-theta_a)/sigma_a))
    function h_inf real = 1. / (1. + exp(-(V_m-theta_h)/sigma_h));
    function m_inf real = 1. / (1. + exp(-(V_m-theta_m)/sigma_m))
    function n_inf real = 1. / (1. + exp(-(V_m-theta_n)/sigma_n))
    function r_inf real = 1. / (1. + exp(-(V_m-theta_r)/sigma_r))
    function s_inf real = 1. / (1. + exp(-(V_m-theta_s)/sigma_s))
    function b_inf real = 1. / (1. + exp((gate_r-theta_b)/sigma_b)) - 1. / (1. + exp(-theta_b/sigma_b))

    function I_Na  pA =  g_Na  * m_inf * m_inf * m_inf * gate_h    * (V_m - E_Na)
    function I_K   pA =  g_K   * gate_n * gate_n * gate_n * gate_n * (V_m - E_K )
    function I_L   pA =  g_L                                 * (V_m - E_L )
    function I_T   pA =  g_T   *a_inf*a_inf*a_inf*b_inf*b_inf* (V_m - E_Ca)
    function I_Ca  pA =  g_Ca  * s_inf * s_inf               * (V_m - E_Ca)
    function I_ahp pA =  g_ahp * (Ca_con / (Ca_con + k1))    * (V_m - E_K )

    # V dot -- synaptic input are currents, inhib current is negative
    V_m' = ( -(I_Na + I_K + I_L + I_T + I_Ca + I_ahp) + I_stim + I_e + I_ex_mod + I_in_mod) / C_m

    #channel dynamics
    gate_h' = phi_h *((h_inf-gate_h) / tau_h) * mV/ms  # h-variable
    gate_n' = phi_n *((n_inf-gate_n) / tau_n) * mV/ms # n-variable
    gate_r' = phi_r *((r_inf-gate_r) / tau_r) * mV/ms # r-variable

    #Calcium concentration
    Ca_con' = epsilon*( (-I_Ca  - I_T ) / pA - k_Ca * Ca_con)

    # synapses: alpha functions
    g_ex'' = -g_ex' / tau_syn_ex
    g_ex' = g_ex' - ( g_ex / tau_syn_ex ) 

    g_in'' = -g_in' / tau_syn_in
    g_in' = g_in' - ( g_in / tau_syn_in ) 
  end

  parameters:
    E_L        mV = -60mV  # Resting membrane potential in mV.
    g_L        nS = 2.25nS # Leak conductance in nS.
    C_m        pF = 1.0 pF # Capacity of the membrane in pF.
    E_Na       mV = 55mV   # Sodium reversal potential in mV.
    g_Na       nS = 37.5nS # Sodium peak conductance in nS.
    E_K        mV = -80.0mV# Potassium reversal potential in mV.
    g_K        nS = 45.0nS # Potassium peak conductance in nS.
    E_Ca       mV = 120mV  # Calcium reversal potential in mV.
    g_Ca       nS = 140nS  # Calcium peak conductance in nS.
    g_T        nS = 0.5nS  # T-type Calcium channel peak conductance in nS.
    g_ahp      nS = 9nS    # afterpolarization current peak conductance in nS.
    tau_syn_ex ms = 1.0ms  # Rise time of the excitatory synaptic alpha function in ms.
    tau_syn_in ms = 0.08ms # Rise time of the inhibitory synaptic alpha function in ms.
    I_e        pA = 0pA    # Constant external input current in pA.
    E_gs			 mV = -85.0mV# reversal potential for inhibitory input (from GPe)
    t_ref      ms = 2ms    # refractory time in ms
    I_stim     pA = 0pA
  end

  internals:
    PSCurrInit_E real = ms * e / tau_syn_ex
    PSCurrInit_I real = ms * e / tau_syn_in
    refractory_counts integer = steps(t_ref)
    r integer # counts number of tick during the refractory period
  end

  input:
      spikeInh   <- inhibitory spike
      spikeExc   <- excitatory spike
      currents <- current
  end

  output: spike

  update:
    U_old mV = V_m
    integrate_odes()

    # sending spikes: crossing 0 mV, pseudo-refractoriness and local maximum...
    if r > 0:
      r -= 1
    elif V_m > 0mV and U_old > V_m:
      r = refractory_counts
      emit_spike()
    end

    # set new input current
    I_stim = currents

    g_ex' += spikeExc * PSCurrInit_E * pA/ms
    g_in' += spikeInh * PSCurrInit_I * pA/ms
  end

end
