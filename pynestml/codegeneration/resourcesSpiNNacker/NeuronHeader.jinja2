#ifndef _NEURON_MODEL_{{neuronName.upper()}}_H_
#define _NEURON_MODEL_{{neuronName.upper()}}_H_

#include <neuron/models/neuron_model.h>

typedef struct neuron_t {

    {#-- TODO: Parameters - make sure these match with the python code,
     including the order of the variables when returned by
     get_neural_parameters.#}

    // Variable-state parameters
    {% for state in neuron.getStateSymbols() -%}
    /*{{state.getSymbolName()}} [{{state.getTypeSymbol().printSymbol()}}] {{state.printComment()}}*/
    REAL {{state.getSymbolName()}};
    {% endfor %}
    // Initial values state variables
    {% for init in neuron.getInitialValuesSymbols() -%}
    /*{{init.getSymbolName()}} [{{init.getTypeSymbol().printSymbol()}}] {{init.printComment()}}*/
    REAL {{names.convertToCPPName(init.getSymbolName())}};
    {% endfor %}
    // Parameter
    {% for parameter in neuron.getParameterSymbols() -%}
    /*{{parameter.getSymbolName()}} [{{parameter.getTypeSymbol().printSymbol()}}] {{parameter.printComment()}}*/
    REAL {{names.convertToCPPName(parameter.getSymbolName())}};
    {% endfor %}
    // Internals
    {% for internal in neuron.getInternalSymbols() -%}
    /*{{internal.getSymbolName()}} [{{internal.getTypeSymbol().printSymbol()}}] {{internal.printComment()}}*/
    REAL {{names.convertToCPPName(internal.getSymbolName())}};
    {% endfor %}
    //Buffers
    {% for buffer in neuron.getInputBuffers() -%}
    /*{{buffer.getSymbolName()}} [{{buffer.getTypeSymbol().printSymbol()}}] {{buffer.printComment()}}*/
    REAL {{names.convertToCPPName(buffer.getSymbolName())}};
    {% endfor %}

} neuron_t;

typedef struct global_neuron_params_t {

    {# TODO: Add any parameters that apply to the whole model here (i.e. not
     just to a single neuron)
    Note: often these are not user supplied, but computed parameters--#}
    uint32_t machine_time_step;

} global_neuron_params_t;

#endif // _NEURON_MODEL_{{neuronName.upper()}}_H_
