from pacman.executor.injection_decorator import inject_items
from pacman.model.decorators import overrides
from spynnaker.pyNN.models.abstract_models import AbstractContainsUnits
from spynnaker.pyNN.models.neural_properties import NeuronParameter
from .abstract_neuron_model import AbstractNeuronModel
from spynnaker.pyNN.utilities import utility_calls

from data_specification.enums import DataType

from enum import Enum


class _{{neuronName.upper()}}_TYPES(Enum):
    # TODO: curretly all vars REAL typed
    {% for var in helper.get_parameters_and_inits(neuron) -%}
    {{names.name(var)}} = ({{loop.index}}, DataType.S1615)
    {% endfor %}
    def __new__(cls, value, data_type):
        obj = object.__new__(cls)
        obj._value_ = value
        obj._data_type = data_type
        return obj

    @property
    def data_type(self):
        return self._data_type


class _{{neuronName.upper()}}_GLOBAL_TYPES(Enum):
    TIMESTEP = (1, DataType.S1615)

    def __new__(cls, value, data_type):
        obj = object.__new__(cls)
        obj._value_ = value
        obj._data_type = data_type
        return obj

    @property
    def data_type(self):
        return self._data_type


class NeuronModel{{neuronName.upper()}}(AbstractNeuronModel, AbstractContainsUnits):

    def __init__(self, n_neurons, {%for var in helper.get_parameters_and_inits(neuron)%}{{names.name(var)}}{% if var!= (helper.get_parameters_and_inits(neuron)|last) %}, {% endif %}{% endfor %}):
        AbstractNeuronModel.__init__(self)
        AbstractContainsUnits.__init__(self)

        self._units = {
         {% for var in helper.get_parameters_and_inits(neuron) -%}
            '{{names.name(var)}}': "{{var.get_type_symbol().print_symbol()}}"{%- if var != (helper.get_parameters_and_inits(neuron)|last) %},{% endif %}
         {% endfor -%}
        }

        self._n_neurons = n_neurons
        {% for var in helper.get_parameters_and_inits(neuron) -%}
            self._{{names.name(var)}} = utility_calls.convert_param_to_numpy({{names.name(var)}}, n_neurons)
        {% endfor -%}


    {% for parameter in helper.get_parameters_and_inits(neuron) %}
    @property
    def {{names.name(parameter)}}(self):
        return self._{{names.name(parameter)}}

    @{{names.name(parameter)}}.setter
    def {{names.name(parameter)}}(self, {{names.name(parameter)}}):
        self._{{names.name(parameter)}} = utility_calls.convert_param_to_numpy({{names.name(parameter)}}, self._n_neurons)
    {% endfor %}
    {%- for init in neuron.get_initial_values_symbols() %}
    # INIT INITIAL VALUES
    def initialize_{{names.convert_to_cpp_name(init.get_symbol_name())}}(self, {{names.name(init)}}):
        self._{{names.name(init)}} = utility_calls.convert_param_to_numpy({{names.name(init)}}, self._n_neurons)
    {% endfor %}
    @overrides(AbstractNeuronModel.get_n_neural_parameters)
    def get_n_neural_parameters(self):
        return {{helper.get_parameters_and_inits(neuron)|length}}

    @inject_items({"machine_time_step": "MachineTimeStep"})
    @overrides(AbstractNeuronModel.get_neural_parameters,
               additional_arguments={'machine_time_step'})
    def get_neural_parameters(self, machine_time_step):
        return [
            {% for parameter in helper.get_parameters_and_inits(neuron) -%}
            # REAL {{names.name(parameter)}}
            NeuronParameter(self._{{names.name(parameter)}}, _{{neuronName.upper()}}_TYPES.{{names.name(parameter)}}.data_type){% if parameter != (helper.get_parameters_and_inits(neuron)|last) %}, {% endif %}
            {% endfor -%}
        ]

    @overrides(AbstractNeuronModel.get_neural_parameter_types)
    def get_neural_parameter_types(self):
        return [item.data_type for item in _{{neuronName.upper()}}_TYPES]

    @overrides(AbstractNeuronModel.get_n_global_parameters)
    def get_n_global_parameters(self):
        # TODO: update to match the number of global parameters
        # Note: This must match the number of parameters in the global_neuron_t
        # data structure in the C code
        # TODO: this is currently hard coded
        return 1

    @inject_items({"machine_time_step": "MachineTimeStep"})
    @overrides(AbstractNeuronModel.get_global_parameters,
               additional_arguments={'machine_time_step'})
    def get_global_parameters(self, machine_time_step):
        return [NeuronParameter(machine_time_step / 1000.0,
                _{{neuronName.upper()}}_GLOBAL_TYPES.TIMESTEP.data_type)]

    @overrides(AbstractNeuronModel.get_global_parameter_types)
    def get_global_parameter_types(self):
        return [item.data_type for item in _{{neuronName.upper()}}_GLOBAL_TYPES]

    @overrides(AbstractNeuronModel.set_neural_parameters)
    def set_neural_parameters(self, neural_parameters, vertex_slice):
        {% for inits in neuron.get_initial_values_symbols() -%}
        self._{{names.name(inits)}}[vertex_slice.as_slice] = neural_parameters[{{helper.get_parameters_and_inits(neuron).index(inits)}}]
        {% endfor %}
    def get_n_cpu_cycles_per_neuron(self):
        return 150

    @overrides(AbstractContainsUnits.get_units)
    def get_units(self, variable):
        return self._units[variable]