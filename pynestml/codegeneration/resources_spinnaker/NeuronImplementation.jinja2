#include "{{neuronName}}.h"
#include <math.h>

#include <debug.h>

static global_neuron_params_pointer_t global_params;

void neuron_model_set_global_neuron_params(global_neuron_params_pointer_t params){
    global_params = params;
}

void neuron_model_integrate(input_t exc_input, input_t inh_input, input_t external_bias, neuron_pointer_t neuron){
    typedef {{neuronName}}::State_ State_;
  {%- for ode in neuron.get_equations_blocks().get_declarations() -%}
    {%- for function in utils.get_alias_symbols(ode) -%}
      {%- if not function.is_equation() -%}
        {% set declaringExpression = function.get_declaring_expression() -%}
  double {{names.name(function)}} = {{printerGSL.print_expression(declaringExpression)}};
      {% endif -%}
    {% endfor -%}
  {% endfor %}
  {%- for odeVariable in neuron.get_non_function_initial_values_symbols() -%}
  {%- if odeVariable.is_ode_defined() %}
  neuron->{{names.name(odeVariable)}} = {{printer.print_expression(odeVariable.get_ode_definition())}};
  {%- endif -%}
  {%- endfor %}
}


state_t neuron_model_state_update(
        input_t exc_input, input_t inh_input, input_t external_bias,
        neuron_pointer_t neuron){
    {%- set dynamics = neuron.get_update_blocks() -%}
    {%- with ast = dynamics.get_block() -%}
    {% for statement in ast.get_stmts() -%}
    {% if not helper.has_threshold_block(statement) %}
    {% filter indent(2,True) -%}
    {% with stmt = statement -%}
    {% include "Statement.jinja2" -%}
    {% endwith -%}
    {% endfilter %}
    {% endif %}
    {% endfor -%}
    {%- endwith %}

    {%- set membrane_var = helper.get_membrane_variable(neuron) %}
    return {{printer.print_origin(membrane_var)}}{{membrane_var.name}};
}

state_t neuron_model_get_membrane_voltage(neuron_pointer_t neuron) {
    {%- set membrane_var = helper.get_membrane_variable(neuron) %}
    return {{printer.print_origin(membrane_var)}}{{membrane_var.name}};
}

void neuron_model_has_spiked(neuron_pointer_t neuron) {
    {% if helper.has_threshold_block(neuron.get_update_blocks()) %}
    {%- with ast = helper.get_threshold_block(neuron.get_update_blocks()) -%}
    {% if helper.is_update_block(ast) %}
    {%- with ast = ast.get_block() %}
    {%- include "Block.jinja2" -%}
    {% endwith %}
    {%- elif helper.is_compound_stmt(ast)%}
    {%- with stmt = ast -%}{%- filter indent(2,True) -%}
    {% include "CompoundStatement.jinja2" -%}{%- endfilter -%}
    {% endwith -%}
    {% else %}
    //TODO: block of threshold check not recognized
    {% endif %}
    {%- endwith -%}{%- else -%}
    {%- for state in neuron.get_state_symbols() -%}
    {{printer.print_origin(state)}}{{names.name(state)}} = {{printer.print_expression(state.get_initial_value())}};
    {% endfor %}
    {% for init in neuron.get_initial_values_symbols() -%}
    /*{{init.get_symbol_name()}} [{{init.get_type_symbol().print_symbol()}}] {{init.print_comment()}}*/
    {{printer.print_origin(state)}}{{names.name(init)}} = {{printer.print_expression(init.get_initial_value())}};
    {% endfor -%}{% endif %}
}

void neuron_model_print_state_variables(restrict neuron_pointer_t neuron){
    {%- for state in neuron.get_state_symbols() -%}
    log_debug("{{state.get_symbol_name()}} = %11.4k {{init.get_type_symbol().print_symbol()}}", neuron->{{names.convert_to_cpp_name(state.get_symbol_name())}});
    {% endfor %}
    {% for init in neuron.get_initial_values_symbols() -%}
    log_debug("{{init.get_symbol_name()}} = %11.4k {{init.get_type_symbol().print_symbol()}}", neuron->{{names.convert_to_cpp_name(init.get_symbol_name())}});
    {% endfor -%}
}

void neuron_model_print_parameters(restrict neuron_pointer_t neuron) {
    {% for parameter in neuron.get_parameter_symbols() -%}
    log_debug("{{parameter.get_symbol_name()}} = %11.4k {{parameter.get_type_symbol().print_symbol()}}", neuron->{{names.convert_to_cpp_name(parameter.get_symbol_name())}});
    {% endfor -%}
}