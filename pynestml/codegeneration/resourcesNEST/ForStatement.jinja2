{%
  Generates C++ statements that implement for loop
  @grammar: forStmt : 'for' var=NAME 'in' vrom=expression '...' to=expression 'step' step=signedNumericLiteral
            BLOCK_OPEN
             block
            BLOCK_CLOSE;
  @param ast ASTForStmt

%}
for( {{ast.getVariable()}} =  {{printer.printExpression(ast.getFrom())}} ;
                 {{ast.getVariable()}} {{printer.printComparisonOperator(ast)} {{printer.printExpression(ast.getTo())}};
     {{ast.getVariable()}} += {{ast.getStep()}} )
{
  {% with ast = ast.getBlock() %}
  {% include "Block.jinja2" %}
  {% endwith %}
} /* for end */

