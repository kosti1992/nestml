{#
  Generates the getter function for the variable.
  @param variable VariableSymbol that captures the variable from the model
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}
{%- if variable.is_function and not utils.contains_sum_call(variable) %}
  inline {{declarations.print_variable_type(variable)}} {{names.getter(variable)}}() const {
    return {{printer.print_expression(variable.get_declaring_expression())}};
  }
{% else %}
  inline {{declarations.print_variable_type(variable)}} {{names.getter(variable)}}() const {
    return {{printer.print_origin(variable)}}{{names.name(variable)}};
  }
  inline void {{names.setter(variable)}}(const {{declarations.print_variable_type(variable)}} __v) {
    {%- if utils.has_constraints(variable,neuron) %}
        {%- for const in utils.get_constraints_of_variable(variable,neuron) %}
            {% if const.has_left_bound() %}
    if(!({{printer.print_expression(const.left_bound)}} {{printer.convert_comparison_op(const.left_bound_type)}} {{printer.print_origin(variable)}}{{names.name(variable)}})){
        throw nest::BadProperty("{{names.name(variable)}} out of constraint bound!");
    }
            {%- endif -%}
            {% if const.has_right_bound() %}
    if(!({{printer.print_origin(variable)}}{{names.name(variable)}} {{printer.convert_comparison_op(const.right_bound_type)}} {{printer.print_expression(const.right_bound)}})){
        throw nest::BadProperty("{{names.name(variable)}} out of constraint bound!");
    }
            {%- endif -%}
        {%- endfor -%}
    {% endif %}
    {{printer.print_origin(variable)}}{{names.name(variable)}} = __v;
  }
{% endif %}